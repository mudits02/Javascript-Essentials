1. Temporal dead zone is basically the time period in which a let variable is hoisted and 
    till it was initalized.

2. Block in js basically when we are grouping multiple js statements to be used afterwards
    its done in between of {} and its the same how we write statments under if statement.

3 Let and const are in block scope that means that if they are declared in a block , then
    they can be accessed only in that particular block and not outisde it, but the var is
    declared globally.

4. Shadowing of var -> refer prac.js for that , basically if a variable is declared outisde
    first and then inside a block , we declare it as some other value , then the block
    value shadows or overwrites it and it shadows it in its global scope. this is done
    because both are pointing to the same memory location.

5. Shadowing happens in let and const too but there value only changes in the block where
    they are being re valued.

6. Shadowing behaves same in a scope of function.

7. Illegal Shadowing -> It means when we reassign a let declared globally through a var 
    inside a scope , it gives an syntax error while vice versa works fine. Both let and 
    const follow lexical scope. 

    let a = 10;
    {
        var a = 20; //this throws error
    }

    <--------->
    var a = 10;
    {
        let a = 20; //Works perfectly fine.
    }

    <------->
    const a = 20;
    {
        const a = 30; 
        console.log(a); // op-> 30
    }

    console.log(a); //op -> 20

8. Var can be declared and accessed globally. Let can be declared globally, but its 
    access is limited to the block in which it is declared. Variables declared using 
    var can be re-declared and updated within the same scope. Variables declared with 
    let can be updated but not re-declared within the same scope.

9. A closure is the combination of a function bundled together (enclosed) with references
    to its surrounding state (the lexical environment). In other words, a closure gives you 
    access to an outer function's scope from an inner function.

    Example in prac.js

10. In example of prac.js , closure means that since we are returning function y from
    func x , so technically , z has the function calling of only y and variable inside
    y is just printed but the defining is done in function x, so basically , it will
    print 10 because it remembers its lexical memeory and that is what is closure.
    So when we call z anywhere else in the program , a is still remembered and printed
    everytime because it remembers its lexical memory.

11. Also remember, in the closure code , the output becomes 100 because the real thing being
    printed here is the reference of a , not the value , since variables are executed in
    global scope , we see that console.log(a) refers the a of the global scope.

12. Differece between function statement and function expression is hoisiting.

13. Function statement and Function declaration is the same thing.

14. Anonymous function means namesless function (different from Arrow functions)
    They throw error when delcared directly (Syntax error). They are used when we have
    to use functions as a value (as declared in function expression example).

15. Function expression is basically when we are declaring a function inside of a variable
    but we are declaring the name of the function in the variable. It shows the output only
    when the varibale is called and not when that function is called because in JS , that
    function is declared in the local scope of the variable and not in the global scope.

16. When we are passing value inside a function , they are called arguements, i.e.
    we have delcared xyz(1 , 2) , so here 1 and 2 are arguements while 
    function xyz(param1 , param2){

    }

    param1 and param2 are parameters.

17. We can also pass a function as an arguement.

18. We can return an Anonymous function from a function

19. First class function means kind of ability to take functions as parameter , to pass 
    them as an arguement or return them from the function.

20. Functions are first class citizens -> ability to use functions like a value.

21. Callback functions are those function swhich are called as an arguement inside of
    a function(they are Anonymous).

22. Callback function help in making the synchronous js asynchronous.

23. A JavaScript callback is a function which is to be executed after another function
    has finished execution. A more formal definition would be - Any function that is
    passed as an argument to another function so that it can be executed in that other
    function is called as a callback function.

24. We use closure for data hiding.

25. Js is synchronous and single threaded.

26. Callback queue is basically a execution queue where all the callbacks are inserted
    and the event loop checks that is there any callback in the queue and it is schduled,
    if it finds one, it send it to the Call stack and it is executed.

27. In event_loop.js ,  when we are doing addEventListener , that function waits in the 
    Web API environment to get pressed and when pressed , it goes in the callback queue
    and then event loop checks for it and pushes it in the call stack and its executed

28. When we call the fetch() Web API , then initially it also waits for in the Web API
    environment until called , then it is sent to MicroTask Queue for execution , which 
    has a high priority than the Callback Queue and is executed first by the Event loop.

29. All the callbacks that come through promises are send to the MicroTask Queue and
    mutation observer too.

30. JavaScript Runtime environment -> An environment which enables to run Js on any machine
    Browser is able to execute js code because it has Js Runtime environment. NodeJs is also
    server side Js environment.

31. How Js engine executes the code
    Code -> Parsing -> Compilation -> Execution.

32. For garbage collection , read mark and sweep algroithm.

33. Google's V8 js engine uses "Ignition" as there interpreter and "Turbofan" as there
    Compilation optimizer.

34. A higher order function is a function which either takes a function as an input or
    returns a function.

35. https://astexplorer.net/ -> visit this for seeing the abstract syntax tree

36. Map is used in js to trabsform an array , i.e. say if we want to double or triple an 
    array , we will use map for that. 

37. Filter basically does as its name , it implemetns and returns the condition to be fulfilled

38. Reduce is used when we have to find a single value out of the array for example
    finding the largest value or sum of the array.

39. in reduce , we have to pass 2 parameters , a function and the initial value of the 
    accumalator. Now that function has 2 parameters , generically called accumaltor and
    current , in which accumaltor is the output we want to return and curr acts like
    nums[i] , or like an iterator(acts like one).

40. Callback hell is basically when we are doing multiple callbakcs inside callbacks,
    (Spaghetti code basically)

41. Inversion of control means when we are giving the control of our code to some other code
    or API and now we have tightly coupled that code.

42. Promise can be seen as an empty object with a data value like {data : ____}. Initally,
    say after an API call , we put that in the promise and till that call is completed , 
    we initiate an undefined value and after we the data , we reassign it with that data
    in the object and our promise is completed and then the callback inside promise.then()
    is executed.

43. This is better than a callback because in callbacks. we are more dependant on the other
    code or API and makes it more vulnerable to fail(Inversion of Control) , what we are
    doing with promise is that we only execute the callback inside the promise.then() when
    we get the data in 'promise'.

44. Only 3 states of promise , pending , fulffiled and rejected.

45. Promises are immutable.

46. A promise is an object reperesenting the eventual completion or faliure of an
    asynchronous operation which can also be used for futurre reference. Essentially , 
    a promise is a returned object to which you attack a callback , instead of passiang
    callbacks in a function.

47. .catch() is used to catch the reject state of the promise , when the promise is rejected
    we catch that using .catch().

48. Whenever we are doing promise chaining , we always have return either a value(which is
    to be passed in the next callback) or we return a promise instead of it.

49. When we do promise .all() , it will take time for all the promises to finish , that
    is in the case of when all promise are succesfully executed. It will give us an
    array of outputs.

50. If any promise is rejected , promise.all() will throw the same error which was thrown
    by the promise , as soon as error occurs , it will throw. 

51. The other promise which dont throw error will be completed but promise.all() on a 
    whole will be rejected and throw an error because promises cannot be canceled in js.

52. Other promises might get success but promise.all() will not wait.

53. For example an intermediate promise gets rejected then also the promise.all() , gets\
    rejected on a whole.

54. promise.allSetteled([p1] , p2 , p3) -> Now this command in promise returns the exact
    same number of values input. So this will return in both the cases. for example , p2
    gets rejected , then output will be -> [val1 , eer2 , val3]. so , it basically waits 
    for all the promises to settle.

55. promise.race([p1 , p2 , p3]) gives the value(not array) of the first settled promise
    settled promise doesnt mean successful promise, if the first promise returns an error
    it will show that error. 

56. promsie.any([p1 , p2 , p3]) -> it gives the value of the first resolved promise,i.e.
    the first promise that gets successful , in the case when all get rejected , they it
    throws an aggregated error, i.e. the combined errors of all the promises in an array
    [err1 , err2 , err3]. Say if 1 fails , then it will ignore that and wait for the first
    successful promise and return the value of it.

57.  Promise lingo
        1. settled -> promise has given us a result(it can be either resolved or rejected 
        both ways).
        2.Resolve -> success or fulffiled
        3.Reject -> Failed or rejected.

58. An async function always return a promise. For example if we dont return a promise and
    directly return a value , then behind the scenes , this will wrap that value in a 
    promise and return it.

59. If the return value inside an async function is already a promise , then it wont wrap
    it in a promise. It is returned as it is.

60. Await keyword basically resolves the promise in the async function. It can only be used
    inside an async function.

61. So basically when we are using the await keyword , the await keyword doesnt make the 
    main thread to be blocked or it waits , it basically suspends the execution of the function
    till the method is resolved and then continues from the place where it left.
    Also when we say that it suspends means since js is synchronous language , it removes
    the function from the callstack until the promise is resolved.

62. fetch() is basically a promise which when resolved gives the output in the form of
    Response object and then we do Response.json() which again is a promise and it returns
    the json format object












